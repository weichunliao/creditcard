install.packages("SnowballC")
library(SnowballC)
install.packages(tm)
install.packages("tm")
c <- matrix(c(1:25), nrow=3)
c <- matrix(c(1:24), nrow=3)
c
v <- c[1:-1]
v <- as.vector(c[1:-1])
v <- as.vector(c[1,-1])
v
m <- c[-1,-1]
m
cosSim <- (m%*%v)/ sqrt(sum(v*v)*rowSums(m*m))
cosSim
a <- (
)
c <- c(1:7)
c
paste(c, spe=" ")
licence()
sessionInfo()
Sys.getlocale()
mu <- c(1, 3)
sigma <- matrix(c(2, -8*2^(1/2), -8*2^(1/2), 1))
sigma
sigma <- matrix(c(2, -8*2^(1/2), -8*2^(1/2), 1), nrow = 2)
sigma
install.packages("mixtools")
library("mixtools")
ellipse(mu, sigma, alpha = .05, npoints = 250, newplot = FALSE,#
        draw = TRUE, ...)
ellipse(mu, sigma))
ellipse(mu, sigma)
ellipse(mu, sigma, 0.5)
mu
as.vector(mu)
library(MASS)
bivn <- mvrnorm(1000, mu = c(1, 3), Sigma = matrix(c(2, -8*2^(1/2), -8*2^(1/2), 1), 2))
sigma <- matrix(c(2, -.8*2^(1/2), -.8*2^(1/2), 1), nrow = 2)
ellipse(mu, sigma, 0.5)
ellipse(mu, sigma, alpha = .5, npoints = 250, newplot = FALSE,#
        draw = TRUE, plot)
ellipse(mu, sigma, alpha = .5, npoints = 250, newplot = TRUE,#
        draw = TRUE, plot)
mu
sigma
ellipse(mu, sigma, alpha = .5, npoints = 250, newplot = TRUE,#
        draw = TRUE, lines)
ellipse(mu, sigma, alpha = .5, npoints = 250, newplot = TRUE,#
        draw = TRUE, plot)
ellipse(mu, sigma, alpha = .5, npoints = 250, newplot = TRUE)
x <- c(1:5); y <- x
plot(x, y, main="type=o")
lines(x, y, type="o")
lines(x, y, type=o)
lines(x, y, type="o")
par(pch=22, col="red") # plotting symbol and color #
par(mfrow=c(2,4)) # all plots on one page #
opts = c("p","l","o","b","c","s","S","h") #
for(i in 1:length(opts)){ #
  heading = paste("type=",opts[i]) #
  plot(x, y, type="n", main=heading) #
  lines(x, y, type=opts[i]) #
}
x <- c(1:5); y <- x # create some data#
par(pch=22, col="blue") # plotting symbol and color #
par(mfrow=c(2,4)) # all plots on one page #
opts = c("p","l","o","b","c","s","S","h") #
for(i in 1:length(opts){ #
  heading = paste("type=",opts[i]) #
  plot(x, y, main=heading) #
  lines(x, y, type=opts[i]) #
}
x <- c(1:5); y <- x # create some data#
par(pch=22, col="blue") # plotting symbol and color #
par(mfrow=c(2,4)) # all plots on one page #
opts = c("p","l","o","b","c","s","S","h") #
for(i in 1:length(opts)){ #
  heading = paste("type=",opts[i]) #
  plot(x, y, main=heading) #
  lines(x, y, type=opts[i]) #
}
x <- c(1:5); y <- x # create some data#
par(pch=22, col="blue") # plotting symbol and color #
par(mfrow=c(2,4)) # all plots on one page #
opts = c("p","l","o","b","c","s","S","h") #
for(i in 1:length(opts)){ #
  heading = paste("type=",opts[i]) #
  plot(x, y, main=heading) #
}
x <- c(1:5); y <- x # create some data#
par(pch=22, col="blue") # plotting symbol and color #
par(mfrow=c(2,4)) # all plots on one page #
opts = c("p","l","o","b","c","s","S","h") #
for(i in 1:length(opts)){ #
  heading = paste("type=",opts[i]) #
  lines(x, y, type=opts[i]) #
}
plot(-4:4, -4:4, type = "n")  # setting up coord. system#
points(rnorm(200), rnorm(200), col = "red")#
points(rnorm(100)/2, rnorm(100)/2, col = "blue", cex = 1.5)
point(x,y, col="yellow")
points(x,y, col="yellow")
points(x,y, col="red")
plot(-4:4, -4:4, type = "n")  # setting up coord. system
points(x,y, col="red")
points((x-3),(y-2), col="blue")
runExample(“03_reactivity")
library("shiny")
runExample(“03_reactivity")
runExample(“02_text")
runExample(“01_hello")
log(2,2,)
help(log)
5/14*log2(5/14)+9/14*log2(9/14)
1*4/14+(2/3*log2(2/3)+1/3*log2(1/3))*6/14+4/14*(3/4*log2(3/4)+1/4*log2(1/4))
1*4/14-(2/3*log2(2/3)+1/3*log2(1/3))*6/14-4/14*(3/4*log2(3/4)+1/4*log2(1/4))
4/14*log2(4/14)-6/14*log2(6/14-4/14)*(4/14*log2(4/14))
1*4/14+(2/3*log2(2/3)+1/3*log2(1/3))*6/14+4/14*(3/4*log2(3/4)+1/4*log2(1/4))
(5/14*log2(5/14)+9/14*log2(9/14)) - 1*4/14-(2/3*log2(2/3)+1/3*log2(1/3))*6/14-4/14*(3/4*log2(3/4)+1/4*log2(1/4))
-(5/14*log2(5/14)+9/14*log2(9/14)) - 1*4/14-(2/3*log2(2/3)+1/3*log2(1/3))*6/14-4/14*(3/4*log2(3/4)+1/4*log2(1/4))
-(5/14*log2(5/14)+9/14*log2(9/14)) - (1*4/14+(2/3*log2(2/3)+1/3*log2(1/3))*6/14+4/14*(3/4*log2(3/4)+1/4*log2(1/4)))
-(5/14*log2(5/14)+9/14*log2(9/14)) - (1*4/14-(2/3*log2(2/3)+1/3*log2(1/3))*6/14-4/14*(3/4*log2(3/4)+1/4*log2(1/4)))
-(5/14*log2(5/14)+9/14*log2(9/14)) - (4/14*(1/2*log2(1/2)+1/2*log2(1/2))+(2/3*log2(2/3)+1/3*log2(1/3))*6/14-4/14*(3/4*log2(3/4)+1/4*log2(1/4)))
1/2*log2(1/2)
-(5/14*log2(5/14)+9/14*log2(9/14)) - (-1*4/14+(2/3*log2(2/3)+1/3*log2(1/3))*6/14+4/14*(3/4*log2(3/4)+1/4*log2(1/4)))
-(5/14*log2(5/14)+9/14*log2(9/14)) + (4/14*(1/2*log2(1/2)+1/2*log2(1/2)) + (2/3*log2(2/3) + 1/3*log2(1/3))*6/14 + 4/14*(3/4*log2(3/4)+1/4*log2(1/4)))
-(5/14*log2(5/14)+9/14*log2(9/14)) + (7/14*(3/7*log2(3/7)+4/7*log2(4/7)) + (6/7*log2(6/7) + 1/7*log2(1/7))*7/14 )
-(5/14*log2(5/14)+9/14*log2(9/14)) - (7/14*(3/7*log2(3/7)+4/7*log2(4/7)) + (6/7*log2(6/7) + 1/7*log2(1/7))*7/14 )
-(5/14*log2(5/14)+9/14*log2(9/14)) - (8/14*(6/8*log2(6/8)+2/8*log2(2/8)) + (3/6*log2(3/6) + 3/6*log2(3/6))*6/14 )
-(5/14*log2(5/14)+9/14*log2(9/14)) + (8/14*(6/8*log2(6/8)+2/8*log2(2/8)) + (3/6*log2(3/6) + 3/6*log2(3/6))*6/14 )
-(5/14*log2(5/14)+9/14*log2(9/14)) + (7/14*(3/7*log2(3/7)+4/7*log2(4/7)) + (6/7*log2(6/7) + 1/7*log2(1/7))*7/14 )
(3/5*log2(3/5)+2/5*log2(2/5))
-(3/5*log2(3/5)+2/5*log2(2/5))
-(3/5*(1*log2(1))+2/5*(1/4*log2(1/4)+3/4*log2(3/4)))
-(2/5*(1*log2(1))+3/5*(1/4*log2(1/4)+3/4*log2(3/4)))
library("tree")#
#
load("/Users/weichun/Downloads/hw2upload 2/OJ_hw2.rdata")#
ls()#
#
tree.OJ = tree(Purchase~., OJ.train)#
summary(tree.OJ)#
plot(tree.OJ)#
text(tree.OJ, pretty = 0)
tree.OJ
tree.pred = predict(tree.OJ,OJ.test, type = "class")#
table(tree.pred,High.test)
Purchase.test = OJ.test$Purchase#
tree.pred = predict(tree.OJ,OJ.test, type = "class")#
table(tree.pred, Purchase.test)
class.pred <- table(tree.pred, Purchase.test)#
1-sum(diag(class.pred))/sum(class.pred)
class.pred
diag(class.pred)
class.pred <- table(tree.pred, Purchase.test)#
1-sum(diag(class.pred))/sum(class.pred)
class.pred <- table(tree.pred, Purchase.test)
class.pred
1-sum(diag(class.pred))/sum(class.pred)
load("/Users/weichun/NTU Space/b01705021@ntu.edu.tw/MySyncFolder/NTU/senior spring/Big Data and Business Analytics/carseats.rdata")
set.seed(2)#
#remove Sales#
Carseats$Sales = NULL#
train=sample(1:nrow(Carseats), 200)#
Carseats.train=Carseats[train,]#
Carseats.test=Carseats[-train,]#
#
tree.carseats=tree(High~.,Carseats.train)#
tree.pred=predict(tree.carseats,Carseats.test,type="class")#
table(tree.pred,High.test)
library(tree)#
#another similar package is rpart, C50#
#
#construct the outcome variable#
#label high sales if Sales > 8#
#
Carseats$High=ifelse(Carseats$Sales<=8,"No","Yes")#
#convert character to factor#
Carseats$High = factor(Carseats$High)#
#train-test evaluation#
set.seed(2)#
#remove Sales#
Carseats$Sales = NULL#
train=sample(1:nrow(Carseats), 200)#
Carseats.train=Carseats[train,]#
Carseats.test=Carseats[-train,]#
#
tree.carseats=tree(High~.,Carseats.train)#
tree.pred=predict(tree.carseats,Carseats.test,type="class")#
table(tree.pred,High.test)
Carseats$High=ifelse(Carseats$Sales<=8,"No","Yes")#
#convert character to factor#
Carseats$High = factor(Carseats$High)#
#train-test evaluation#
set.seed(2)#
#remove Sales#
Carseats$Sales = NULL#
train=sample(1:nrow(Carseats), 200)#
Carseats.train=Carseats[train,]#
Carseats.test=Carseats[-train,]#
#
tree.carseats=tree(High~.,Carseats.train)#
tree.pred=predict(tree.carseats,Carseats.test,type="class")#
table(tree.pred,High.test)
Carseats$High=ifelse(Carseats$Sales<=8,"No","Yes")#
#convert character to factor#
Carseats$High = factor(Carseats$High)
head(Carseats)
Carseats$High=ifelse(Carseats$Sales<=8,"No","Yes")
head(Carseats)
ls()
summary(Carseats$Sales)
load("/Users/weichun/NTU Space/b01705021@ntu.edu.tw/MySyncFolder/NTU/senior spring/Big Data and Business Analytics/carseats.rdata")
Carseats$High=ifelse(Carseats$Sales<=8,"No","Yes")#
#convert character to factor#
Carseats$High = factor(Carseats$High)#
#train-test evaluation#
set.seed(2)#
#remove Sales#
Carseats$Sales = NULL#
train=sample(1:nrow(Carseats), 200)#
Carseats.train=Carseats[train,]#
Carseats.test=Carseats[-train,]#
#
tree.carseats=tree(High~.,Carseats.train)#
tree.pred=predict(tree.carseats,Carseats.test,type="class")#
table(tree.pred,High.test)
table(tree.pred,Carseats.test$High)
plot(set.seed(2)#
train=sample(1:nrow(Carseats), 200)#
Carseats.test=Carseats[-train,]#
High.test=Carseats$High[-train]#
tree.carseats=tree(High~.-Sales,Carseats,subset=train)#
tree.pred=predict(tree.carseats,Carseats.test,type="class")#
table(tree.pred,High.test)#
#accuracy = 0.715#
(86+57)/200#
#
)
set.seed(2)#
train=sample(1:nrow(Carseats), 200)#
Carseats.test=Carseats[-train,]#
High.test=Carseats$High[-train]#
tree.carseats=tree(High~.-Sales,Carseats,subset=train)#
tree.pred=predict(tree.carseats,Carseats.test,type="class")#
table(tree.pred,High.test)#
#accuracy = 0.715
summary(tree.carseats)#
plot(tree.carseats)#
text(tree.carseats,pretty=0)#
tree.carseats
set.seed(2)#
#remove Sales#
Carseats$Sales = NULL#
train=sample(1:nrow(Carseats), 200)#
Carseats.train=Carseats[train,]#
Carseats.test=Carseats[-train,]#
#
tree.carseats=tree(High~.,Carseats.train)
plot(tree.carseats)
tree.carseat
tree.carseats
plot(tree.carseats)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
tree.pred
plot(tree.carseats)
text(tree.carseats,pretty=1)
text(tree.carseats,pretty=0)
text(tree.carseats,pretty=0¥8)
text(tree.carseats,pretty=9)
library("maptree")
install.packages("maptree")
library("maptree")
draw.tree(tree.carseats)
draw.tree(tree.OJ)
clean()
help()
ls()
library(MASS)
ls()
fix(Boston)
ls()
help(Boston)
names(Boston)
lm.fit=lm(medv~lstat,data=Boston)
summary(lm.fit)
names(lm.fit)#
coef(lm.fit)#
confint(lm.fit)
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")#
#parameter uncertainty + uncertainty caused by "noise"#
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")#
#
#plot the regression result#
plot(Boston$lstat, Boston$medv)
plot(lm.fit)
setwd("/Users/weichun/Desktop/creditcard")
data_list <- readRDS("data_list.rds")#
data_list_v2 <- readRDS("data_list_v2.rds")
rownames(data_list[[1]])
rownames(data_list[[1]][[1]])
rownames(data_list[[10]][[1]])
data1 <- read.table("news_matrix.txt", sep="\t", header=T, fileEncoding="UTF-16")
data2 <- read.table("non_news_matrix.txt", sep="\t", header=T, fileEncoding="UTF-16")
colnames(data1)
colnames(data1)[4]
colnames(data1)[31]
colnames(data1)[29]
head(data1[,4:29-12])
head(data1[,4:29~-12])
head(data1[,4:29])
head(data1[,4:29])[,-c(9,10,18,19)]
test1 <- data1[,4:29])[,-c(9,10,18,19)#
test2 <- data2[,4:29])[,-c(9,10,18,19)
test1 <- data1[,4:29]#
test1 <- test1[,-c(9,10,18,19)]#
test2 <- data2[,4:29]#
test2 <- test2[,-c(9,10,18,19)]
table(rowSums(test1))
table(rowSums(test2))
ind2 <- which(rowSums(test2)==0, arr.ind=T)
rnrow(ind2)
nrow(ind2)
ind2 <- which(rowSums(test2) = 0, arr.ind=T)
ind2 <- which(rowSums(test2) == 0, arr.ind=T)
nrow(ind2)
which(rowSums(test2) == 0, arr.ind=
T)
ind2 <- which(rowSums(test2) == 0, arr.ind=T)
length(ind2)
rownames(data_list[[10]][[1]])
banksss <- rownames(data_list[[10]][[1]])
banksss <- rownames(data_list[[10]][[1]])[-1]
banksss
banksss <- rownames(data_list[[10]][[1]])
banksss <- head(rownames(data_list[[10]][[1]]), -1)
banksss
plot(NULL)
bank_matrix <- lapply(banksss, function(x) get_bank(x))
get_bank <- function(bank_name, year_count = 11, data_list = data_list_v2) {#
	data_list_v2 <- tail(data_list_v2, year_count)#
	start_year <- 104 - year_count#
	temp <- lapply(data_list, function(x) {return ( cbind(month=c(1:12), t(sapply(x, function (y) { return(y[bank_name,]) })))) } )#
	temp <- lapply(seq_along(temp), function(i) {return (cbind(year=rep((i+start_year), 12), temp[[i]]))})#
	temp <- do.call(rbind, temp)#
	temp <- as.data.frame(temp)#
	temp <- cbind( date = as.Date(paste(1, (temp[,1]+1911), temp[,2]), format="%d %Y %m"), temp)#
	# temp <- temp[,-c(2,3)]#
#
	return (temp)#
}
bank_matrix <- lapply(banksss, function(x) get_bank(x))
bank_matrix <- lapply(banksss, function(x) get_bank(x, year_count=6))
rownames(data_list[[5]][[1]])
rownames(data_list[[11]][[1]])
rownames(data_list[[11]][[1]]) %in%rownames(data_list[[5]][[1]])
rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])
which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==T, arr.ind=T)
which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==F, arr.ind=T)
rownames(data_list[[11]][[1]])[which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==F, arr.ind=T)]
rownames(data_list[[11]][[1]])[-which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==T, arr.ind=T)]
rownames(data_list[[11]][[1]])[-c(which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==T, arr.ind=T))]
rownames(data_list[[11]][[1]])[-3]
rownames(data_list[[11]][[1]])[-c(which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==F, arr.ind=T))]
tail(rownames(data_list[[11]][[1]])[-c(which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==F, arr.ind=T))],1)
banksss<-head(rownames(data_list[[11]][[1]])[-c(which(rownames(data_list[[11]][[1]]) %in%rownames(data_list[[6]][[1]])==F, arr.ind=T))],-1)
banksss
bank_matrix <- lapply(banksss, function(x) get_bank(x, year_count=6))
(which(banksss %in%rownames(data_list[[6]][[1]])==F, arr.ind=T))
(which(banksss %in%rownames(data_list[[6]][[1]])==T, arr.ind=T))
bank_matrix <- lapply(head(banksss), function(x) get_bank(x, year_count=6))
bank_matrix <- lapply(head(banksss,10), function(x) get_bank(x, year_count=6))
bank_matrix <- lapply(head(banksss,15), function(x) get_bank(x, year_count=6))
bank_matrix <- lapply(head(banksss,20), function(x) get_bank(x, year_count=6))
bank_matrix <- lapply(head(banksss,25), function(x) get_bank(x, year_count=6))
bank_matrix <- lapply(head(banksss,30), function(x) get_bank(x, year_count=6))
rownames(data_list[[6]][[1]])
bank_matrix <- lapply(head(banksss,29), function(x) get_bank(x, year_count=6))
bank_matrix <- lapply(head(banksss,28), function(x) get_bank(x, year_count=6))
banksss <- banksss[-29]
banksss
bank_matrix <- lapply(banksss, function(x) get_bank(x, year_count=6))
head(bank_matrix[[1]])
plot.new
plot.new()
t <- lapply(seq_along(bank_matrix), funciton(x) lines(bank_matrix[[x]][,1],bank_matrix[[x]][,11], col=color[x], type="l", lwd=2))
lapply(seq_along(bank_matrix), funciton(x) lines(bank_matrix[[x]][,1],bank_matrix[[x]][,11], col=color[x], type="l", lwd=2))
plot.new()#
for (i in 1:29) {#
	lines(bank_matrix[[i]][,1], bank_matrix[[i]][,11],col=color[i], type="l", ylim=c(0.5,1), lwd=2)#
}
color <- terrain.colors(36)
for (i in 1:29) {#
	lines(bank_matrix[[i]][,1], bank_matrix[[i]][,11],col=color[i], type="l", ylim=c(0.5,1), lwd=2)#
}
plot(NULL, xlim=c(bank_matrix[[i]][,1]), ylim=c(1,5))
for (i in 1:29) {#
	lines(bank_matrix[[i]][,1], bank_matrix[[i]][,11],col=color[i], type="l", ylim=c(0.5,1), lwd=2)#
}
plot(bank_matrix[[1]][,1], bank_matrix[[1]][,11], ylim=c(1,5))
plot(bank_matrix[[1]][,1], bank_matrix[[1]][,11], ylim=c(1,5), col=color[1])
head(bank_matrix[[1]][,11])
plot(bank_matrix[[1]][,1], bank_matrix[[1]][,11], ylim=c(0,5), col=color[1])#
for (i in 2:29) {#
	lines(bank_matrix[[i]][,1], bank_matrix[[i]][,11],col=color[i], type="l", ylim=c(0.5,1), lwd=2)#
}
plot(bank_matrix[[1]][,1], bank_matrix[[1]][,11], ylim=c(0,5), col=color[1], type="l")#
for (i in 2:29) {#
	lines(bank_matrix[[i]][,1], bank_matrix[[i]][,11],col=color[i], type="l", ylim=c(0.5,1), lwd=1)#
}
